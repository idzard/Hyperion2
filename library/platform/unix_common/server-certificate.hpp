//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_EXAMPLE_COMMON_SERVER_CERTIFICATE_HPP
#define BOOST_BEAST_EXAMPLE_COMMON_SERVER_CERTIFICATE_HPP

#include <boost/asio/buffer.hpp>
#include <boost/asio/ssl/context.hpp>
#include <cstddef>
#include <memory>

//these file will be generated by cmake and places in the build folder.
//these header file are based on the crt and key files in the scripts/certificate folder
//to generate the key and crt files, run the generate.sh command first
#include "hyperion.crt.h"
#include "hyperion.key.h"

/*  Load a signed certificate into the ssl context, and configure
    the context for use with a server.

    For this to work with the browser or operating system, it is
    necessary to import the "Beast Test CA" certificate into
    the local certificate store, browser, or operating system
    depending on your environment Please see the documentation
    accompanying the Beast certificate for more details.
*/
inline
void
load_server_certificate(boost::asio::ssl::context& ctx)
{    
    ctx.set_password_callback(
        [](std::size_t,
            boost::asio::ssl::context_base::password_purpose)
        {
            return "test";
        });

    ctx.set_options(
        boost::asio::ssl::context::default_workarounds |
        boost::asio::ssl::context::no_sslv2 |
        boost::asio::ssl::context::no_sslv3
        );

    ctx.use_certificate_chain(
        boost::asio::buffer(HYPERION_CERT, HYPERION_CERT_SIZE));

    ctx.use_private_key(
        boost::asio::buffer(HYPERION_KEY, HYPERION_KEY_SIZE),
        boost::asio::ssl::context::file_format::pem);

    //ctx.use_tmp_dh(
    //    boost::asio::buffer(dh.data(), dh.size()));
}

#endif